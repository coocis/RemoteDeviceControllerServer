//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteDeviceControllerClient.FileAccessServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileAccessServiceReference.IFileAccessService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFileAccessService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetDirectoryFileNames", ReplyAction="http://tempuri.org/IFileAccessService/GetDirectoryFileNamesResponse")]
        string[] GetDirectoryFileNames(string directory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetDirectoryFileNames", ReplyAction="http://tempuri.org/IFileAccessService/GetDirectoryFileNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetDirectoryFileNamesAsync(string directory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetDirectoryFolderNames", ReplyAction="http://tempuri.org/IFileAccessService/GetDirectoryFolderNamesResponse")]
        string[] GetDirectoryFolderNames(string directory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetDirectoryFolderNames", ReplyAction="http://tempuri.org/IFileAccessService/GetDirectoryFolderNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetDirectoryFolderNamesAsync(string directory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetFileThumbnail", ReplyAction="http://tempuri.org/IFileAccessService/GetFileThumbnailResponse")]
        byte[] GetFileThumbnail(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetFileThumbnail", ReplyAction="http://tempuri.org/IFileAccessService/GetFileThumbnailResponse")]
        System.Threading.Tasks.Task<byte[]> GetFileThumbnailAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetFile", ReplyAction="http://tempuri.org/IFileAccessService/GetFileResponse")]
        byte[] GetFile(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetFile", ReplyAction="http://tempuri.org/IFileAccessService/GetFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetFileAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetAccessibleDirectorys", ReplyAction="http://tempuri.org/IFileAccessService/GetAccessibleDirectorysResponse")]
        string[] GetAccessibleDirectorys();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileAccessService/GetAccessibleDirectorys", ReplyAction="http://tempuri.org/IFileAccessService/GetAccessibleDirectorysResponse")]
        System.Threading.Tasks.Task<string[]> GetAccessibleDirectorysAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileAccessService/Connect")]
        void Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileAccessService/Connect")]
        System.Threading.Tasks.Task ConnectAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileAccessServiceChannel : RemoteDeviceControllerClient.FileAccessServiceReference.IFileAccessService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileAccessServiceClient : System.ServiceModel.ClientBase<RemoteDeviceControllerClient.FileAccessServiceReference.IFileAccessService>, RemoteDeviceControllerClient.FileAccessServiceReference.IFileAccessService {
        
        public FileAccessServiceClient() {
        }
        
        public FileAccessServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileAccessServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileAccessServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileAccessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetDirectoryFileNames(string directory) {
            return base.Channel.GetDirectoryFileNames(directory);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDirectoryFileNamesAsync(string directory) {
            return base.Channel.GetDirectoryFileNamesAsync(directory);
        }
        
        public string[] GetDirectoryFolderNames(string directory) {
            return base.Channel.GetDirectoryFolderNames(directory);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDirectoryFolderNamesAsync(string directory) {
            return base.Channel.GetDirectoryFolderNamesAsync(directory);
        }
        
        public byte[] GetFileThumbnail(string filePath) {
            return base.Channel.GetFileThumbnail(filePath);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetFileThumbnailAsync(string filePath) {
            return base.Channel.GetFileThumbnailAsync(filePath);
        }
        
        public byte[] GetFile(string filePath) {
            return base.Channel.GetFile(filePath);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetFileAsync(string filePath) {
            return base.Channel.GetFileAsync(filePath);
        }
        
        public string[] GetAccessibleDirectorys() {
            return base.Channel.GetAccessibleDirectorys();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAccessibleDirectorysAsync() {
            return base.Channel.GetAccessibleDirectorysAsync();
        }
        
        public void Connect(string name) {
            base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
    }
}
