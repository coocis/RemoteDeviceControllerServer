//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteDeviceControllerForWindows.NATTraversalServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NATTraversalServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SignIn", ReplyAction="http://tempuri.org/IService/SignInResponse")]
        int SignIn(string serverName, string serviceAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SignIn", ReplyAction="http://tempuri.org/IService/SignInResponse")]
        System.Threading.Tasks.Task<int> SignInAsync(string serverName, string serviceAddress);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SignOut")]
        void SignOut(int serverId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SignOut")]
        System.Threading.Tasks.Task SignOutAsync(int serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RequestServerNames", ReplyAction="http://tempuri.org/IService/RequestServerNamesResponse")]
        string[] RequestServerNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RequestServerNames", ReplyAction="http://tempuri.org/IService/RequestServerNamesResponse")]
        System.Threading.Tasks.Task<string[]> RequestServerNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RequestServerAddresses", ReplyAction="http://tempuri.org/IService/RequestServerAddressesResponse")]
        string[] RequestServerAddresses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RequestServerAddresses", ReplyAction="http://tempuri.org/IService/RequestServerAddressesResponse")]
        System.Threading.Tasks.Task<string[]> RequestServerAddressesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : RemoteDeviceControllerForWindows.NATTraversalServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<RemoteDeviceControllerForWindows.NATTraversalServiceReference.IService>, RemoteDeviceControllerForWindows.NATTraversalServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SignIn(string serverName, string serviceAddress) {
            return base.Channel.SignIn(serverName, serviceAddress);
        }
        
        public System.Threading.Tasks.Task<int> SignInAsync(string serverName, string serviceAddress) {
            return base.Channel.SignInAsync(serverName, serviceAddress);
        }
        
        public void SignOut(int serverId) {
            base.Channel.SignOut(serverId);
        }
        
        public System.Threading.Tasks.Task SignOutAsync(int serverId) {
            return base.Channel.SignOutAsync(serverId);
        }
        
        public string[] RequestServerNames() {
            return base.Channel.RequestServerNames();
        }
        
        public System.Threading.Tasks.Task<string[]> RequestServerNamesAsync() {
            return base.Channel.RequestServerNamesAsync();
        }
        
        public string[] RequestServerAddresses() {
            return base.Channel.RequestServerAddresses();
        }
        
        public System.Threading.Tasks.Task<string[]> RequestServerAddressesAsync() {
            return base.Channel.RequestServerAddressesAsync();
        }
    }
}
